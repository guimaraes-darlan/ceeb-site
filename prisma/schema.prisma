generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model Category {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @db.Citext
  price         Float?
  quantity      Int?
  fixedQuantity Boolean   @map(name: "fixed_quantity")
  fixedPrice    Boolean   @map(name: "fixed_price")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  Invoices      Invoice[]

  @@map("categories")
}

model Invoice {
  id          String   @id @default(uuid()) @db.Uuid
  date        DateTime
  quantity    Int
  price       Decimal
  value       Decimal
  credit      Boolean  @default(false)
  paymentType String   @map(name: "payment_type")
  categoryId  String   @map(name: "category_id") @db.Uuid
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  @@map("invoices")
}

model Lending {
  id           String    @id @default(uuid()) @db.Uuid
  bookId       String    @map(name: "book_id") @db.Uuid
  book         Book      @relation(fields: [bookId], references: [id])
  readerId     String    @map(name: "reader_id") @db.Uuid
  reader       Reader    @relation(fields: [readerId], references: [id])
  date         DateTime  @db.Date
  expectedDate DateTime  @map(name: "expected_date") @db.Date
  deliveryDate DateTime? @map(name: "delivery_date") @db.Date
  returned     Boolean   @default(false)
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  @@map("lendings")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  username  String
  email     String
  password  String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("users")
}

model Book {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @db.Citext
  author    String    @db.Citext
  writer    String?
  code      String
  borrow    Boolean   @default(false)
  edition   String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  Lending   Lending[]

  @@map("books")
}

model Reader {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @db.Citext
  phone     String
  address   String?
  city      String?
  email     String?
  openLoan  Boolean   @default(false) @map(name: "open_loan")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  Lending   Lending[]

  @@map("readers")
}

model Speaker {
  id              String            @id @default(uuid()) @db.Uuid
  name            String            @db.Citext
  house           String            @db.Citext
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  updatedAt       DateTime          @updatedAt @map(name: "updated_at")
  LectureCalendar LectureCalendar[]

  @@map("speakers")
}

model LectureCalendar {
  id        String   @id @default(uuid()) @db.Uuid
  speakerId String   @map(name: "speaker_id") @db.Uuid
  speaker   Speaker  @relation(fields: [speakerId], references: [id])
  date      DateTime
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("lecture_calendar")
}
